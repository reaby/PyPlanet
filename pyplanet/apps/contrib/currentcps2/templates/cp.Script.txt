#Include "TextLib" as TextLib
#Include "MathLib" as MathLib

***OnInit***
***
    declare oldSequence = CUIConfig::EUISequence::None;
    declare Boolean needUpdate = True;
    declare Integer lastUpdate = Now - 250;
    declare Integer oldPlayersCount = Players.count;
    declare Integer recordsAmount;
    declare Integer[Text][Integer] Progress;  
    declare Text[Text] NickNames;
    declare fps <=> (Page.GetFirstChild("fps") as CMlLabel);
    declare Real frames = 0.;

    recordsAmount = {{ records_amount }};
    
    for (i, 0, recordsAmount-1) {             
        (Page.GetFirstChild("pos_"^i) as CMlFrame).Hide();                
    }    
    Progress.clear();
    NickNames.clear();

    foreach (player in Players) {
        declare CTmResult race <=> player.CurRace;
        declare checkpoint = race.Checkpoints.count-1;    
        if (checkpoint >= 0) {
            if (!Progress.existskey(checkpoint)) {                
                    Progress[checkpoint] = Integer[Text];                                
            }          
            if (race.Checkpoints[checkpoint] > 0) {  
                Progress[checkpoint][player.User.Login] = race.Checkpoints[checkpoint];
            }
        }   

        NickNames[player.User.Login] = TextLib::RegexReplace("\\$[lh]\\[.+\\]|\\$[lh]",player.User.Name,"g","");
    }
***


***Loop***
***

if (oldSequence != UI.UISequence) {
    oldSequence = UI.UISequence;
    if (UI.UISequence == CUIConfig::EUISequence::EndRound) {
           Progress.clear();
           NickNames.clear();
           for (i, 0, recordsAmount-1) {             
                (Page.GetFirstChild("pos_"^i) as CMlFrame).Hide();                
            }   
    }   
}
    foreach (Event in PendingEvents) {
        if (Event.Type == CMlScriptEvent::Type::MouseClick && Event.Control.HasClass("toggleSpec")) {     
            if (InputPlayer.RequestsSpectate) {
                declare x = TextLib::ToInteger(Event.Control.DataAttributeGet("position"));
                declare frame <=> (Page.GetFirstChild("pos_"^x) as CMlFrame);                            
                SetSpectateTarget(frame.DataAttributeGet("login"));
            }
        }
    }
    


    foreach (event in RaceEvents) {
        if (event.Type == CTmRaceClientEvent::EType::Respawn) {
            needUpdate = True;
        }

       if (event.Type == CTmRaceClientEvent::EType::WayPoint) {
            foreach (cp => playerTime in Progress ) {                    
                if (Progress[cp].existskey(event.Player.User.Login)) {
                    Progress[cp].removekey(event.Player.User.Login);
                }   
            }             

           if (!Progress.existskey(event.CheckpointInRace)) {
                Progress[event.CheckpointInRace] = Integer[Text];
                Progress[event.CheckpointInRace][event.Player.User.Login] = event.RaceTime;
           } else {
               // remove duplicates                
                Progress[event.CheckpointInRace][event.Player.User.Login] = event.RaceTime;             
           }                       
            NickNames[event.Player.User.Login] = TextLib::RegexReplace("\\$[lh]\\[.+\\]|\\$[lh]",event.Player.User.Name,"g","");
            needUpdate = True;
        }
    }

    if (oldPlayersCount != Players.count) {
        oldPlayersCount = Players.count;
        needUpdate = True;
    }

   if (Now - lastUpdate > 250) {
      lastUpdate = Now;
      fps.Value = "fps "^frames;

        if (needUpdate == True) {
            needUpdate = False;                
            declare x = 0;
            Progress = Progress.sortkeyreverse();            
            for (i, 0, recordsAmount-1) {             
                (Page.GetFirstChild("pos_"^i) as CMlFrame).Hide();                
            }
            foreach (cp => playerTime in Progress) {                            
                if (playerTime.count < 0) continue;
                if (x > recordsAmount-1) break;
                declare timeArray = playerTime.sort();

                foreach (login => time in timeArray) {
                    if (x > recordsAmount-1) break;
                    declare frame <=> (Page.GetFirstChild("pos_"^x) as CMlFrame);
                    frame.DataAttributeSet("login", login);
                    frame.Show();                    
                    (frame.Controls[1] as CMlLabel).Value = ""^(cp + 1);
                    (frame.Controls[3] as CMlLabel).Value = NickNames[login];
                    (frame.Controls[5] as CMlLabel).Value = TimeToText(time);                   
                    x += 1;
                }  
                
            }        
        } // need update
      } // if

  frames = (1000. / Period);
***

Text FormatSec(Real sec) {
    if (sec > 10.) return TextLib::FormatReal(sec,3,False,False);
    return  0 ^ TextLib::FormatReal(sec,3,False,False);
}

Text TimeToText(Integer intime) {
    declare time = MathLib::Abs(intime);
    declare Integer cent = time % 1000;
    declare Integer sec2 = (time / 1000) % 60;
    declare Real sec = 1. * sec2 + cent * 0.001;
    declare Integer min = (time / 60000) % 60;
    declare Integer hour = time / 3600000;
    declare Text sign = "";
    if (intime < 0) sign = "-";
    if (hour > 0) return sign ^ hour ^ "'" ^ TextLib::FormatInteger(min,2) ^ ":" ^ FormatSec(sec);
    if (min == 0) return sign ^ "00:" ^ FormatSec(sec);
    if (min > 10)  return sign ^ min ^ ":" ^ FormatSec(sec);
    return sign ^ 0 ^ min ^ ":" ^ FormatSec(sec);
}

main() {  
  wait (InputPlayer != Null);  
  yield;

  +++OnInit+++

    while (True) {
        yield;

        if (!PageIsVisible || InputPlayer == Null) {
            continue;
        }

        +++Loop+++
    }
}
